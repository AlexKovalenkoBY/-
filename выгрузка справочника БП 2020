var myMain = createMainInstance (Context, ArisData) ;
myMain.execute();

function createMainInstance(context, arisData)  {

    function Main(context, arisData) {
        
        this._context = context; 
        this._arisData = arisData;

    }
     
    Main.prototype.execute =  function(){
        if (!this._context || !this._arisData) {
            return; // unit test environment use case
        }
        var g_nLoc =this._context.getSelectedLanguage(); 
          var rootGroup = arisData.getActiveDatabase().RootGroup ( );
          
          var model_treeGr = rootGroup.Childs(true).filter(function(mygr){ 

             return  ((mygr.Name(g_nLoc) =="  Модель (дерево) бизнес-процессов Банка")
             &&(mygr.Path(g_nLoc) == "Бизнес-модель Банка\\Бизнес-модель  «как есть»\\  Модель (дерево) бизнес-процессов Банка")
             );
          })[0];
          ////////////
/* 
так тоже можно, но пока не требуется

 var db = ArisData.getSelectedDatabases()[0]
 var searchItem = db.createSearchItem(Constants.AT_NAME, g_nLoc, false) //name not maintained
 var searchItem2 = db.createSearchItem(Constants.AT_NAME, g_nLoc, "  Модель (дерево) бизнес-процессов Банка", Constants.SEARCH_CMP_EQUAL, true, true)//case sensitive, allow wildcards
 var result = db.Find(Constants.SEARCH_GROUP, null, searchItem.or(searchItem2)).filter(function(gr){
 return gr.Path() == "Бизнес-модель Банка\Бизнес-модель  «как есть»\  Модель (дерево) бизнес-процессов Банка"
 })
 */
          //////////
          var allmodels = model_treeGr.ModelList ( true, [Constants.MT_VAL_ADD_CHN_DGM] );
          var alldefs = [];
          for (var i=0; i<allmodels.length; i++){
            alldefs = alldefs.concat(allmodels[i].ObjOccListBySymbol ( [Constants.ST_VAL_ADD_CHN_SML_1] ).map(function (occ){return occ.ObjDef();})) 
          }
      alldefs = arisData.Unique(alldefs);//.map(function(def){return def.Name(g_nLoc)}); //собрали все объекты для дальнейшего вывода
      alldefs = arisData.sort(alldefs,Constants.AT_NAME, context.getSelectedLanguage() );

var obj_class = new init_bp_obj_class (context, arisData);
var onebp = new obj_class (context, arisData,alldefs[0]);
var s=0;      
  var outFile = new java.io.FileWriter(getString ("TEXT_1"), false);  // file DataTreeBP.CSV    
   var strToFile = "outputString";
   outFile.write(strToFile);
    outFile.flush();
    outFile.close();

    
    
function init_bp_obj_class (context, arisData){

function bp_obj_class (context, arisData, bpdef){
    this.objDef = bpdef;    
    this.id = bpdef.Identifier(g_nLoc).slice(bpdef.Identifier(g_nLoc).indexOf(".")+1);
    this.num = bpdef.Name(g_nLoc).slice(0,bpdef.Name(g_nLoc).indexOf(" "));
    this.name = bpdef.Name(g_nLoc);
    this.owner = this.getOwner();
    this.numTextName = this.getnumTextBPName();
    this.detalisation = this.detalisationExist();
    this.getParentBP = this.getParentBP();
    this.dateBegin = this.getStartDate();
    this.dateEnd = this.getEndDate();
    this.target = this.getTargets();
    this.inputs = this.getInputs();
    this.outputs = this.getOutputs();
    this.products = this.getProducts();
    this.remark = bpdef.Attribute(Constants.AT_REM,g_nLoc).getValue();

}

        var proto = bp_obj_class.prototype;
        proto.getOwner = function (){
        var obj = this.objDef;
        var modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc).indexOf("_Окружение БП ") == 0 })[0];
        
        if (modelOkr == null) {
            var modelBP = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc)==obj.Name(g_nLoc)})[0];
        }
        else {
        modelBP = modelOkr;
        }
        var ownerobj = modelBP.ObjOccListFilter ( Constants.OT_PERS_TYPE ); 
        if (ownerobj.length>1) {
            Dialogs.MsgBox("ВНИМАНИЕ!!! \n для БП "+obj.Name(g_nLoc)+" указано более одного владельца!!!")
            return "ERROR WITH OWNER"
        }
        else {
            if (ownerobj.length==0) { return 999; } 
            else {
            return ownerobj[0].Attribute(Constants.AT_PERS_RESP,g_nLoc).getValue().toString().slice(ownerobj[0].Attribute(Constants.AT_PERS_RESP,g_nLoc).getValue().toString().indexOf("_"));
            }
                
        }
        
        
        }
        //////
        proto.getnumTextBPName = function (){
        var obj = this.objDef;
        var code = obj.Name(g_nLoc).trim();
            if (code == "(Без имени)") code = occFunc.ObjDef().Attribute(Constants.AT_DESC,g_nLoc).GetValue(true).toString().trim();
           
            var mas = code.substr(0, code.lastIndexOf(".")).split("");
            var code_bp_txt = "";
           
            switch (mas[0]){
                case '1':
                code_bp_txt = "УПБП";
                break;
               
                case '2':
                code_bp_txt = "ОББП"
                break;
               
                case '3':
                code_bp_txt = "ОСБП";
               
                switch (mas[2]){
                    case '1':
                    code_bp_txt += "КК";
                    break;
                   
                    case '2':
                    code_bp_txt += "ФЛ"
                    break;
                   
                    case '3':
                    code_bp_txt += "ФИ";
                    break;
                   
                    case '4':
                    code_bp_txt += "ИД";
                    break;
                }
                break;
               
                case '4':
                code_bp_txt = "РЗБП";
                break;
               
                case '5':
                code_bp_txt = "ПРБП";
                break;
            }
           
            code_bp_txt += "_" + code.substr(0, code.indexOf(" "));   
           
            return code_bp_txt;
        }
        
        proto.detalisationExist = function (){
        var obj = this.objDef;
     //   var modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc).indexOf("_Окружение БП ") == 0 })[0];
        var modelBP = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc)==obj.Name(g_nLoc)})[0];
        
        if (modelBP==null) {return 0}
             else {return 1}
     
        
        }

        proto.getParentBP = function(){
        var obj = this.objDef;
        var parent = obj.getConnectedObjs ([Constants.OT_FUNC] , Constants.EDGES_IN, [Constants.CT_IS_PRCS_ORNT_SUPER] )[0].Identifier(g_nLoc);
        return parent.slice(parent.indexOf(".")+1);
        }

        proto.getStartDate = function (){
        var obj = this.objDef;
        var modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc).indexOf("_Окружение БП ") == 0 })[0];
        
        if (modelOkr == null) {
            modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc)==obj.Name(g_nLoc)})[0]; //вместо модели окружения ищем одноименную модель
        }
        var datestart = modelOkr.Attribute(Constants.AT_VALID_FROM,g_nLoc).getValue();
        if ( datestart == "" ) { return "2017-04-20"}
        else {
                //задаем формат исходной текстовой даты
                var formatForParse = new java.text.SimpleDateFormat("dd.MM.yyyy");  
                //переводим строковую дату в формат "дата"
                var date = formatForParse.parse(datestart);            
                //задаем формат преобразования даты
                var sqlFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");  
                return sqlFormat.format(date);
        }
        }
         
         
        proto.getEndDate = function (){
        var obj = this.objDef;
        var modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc).indexOf("_Окружение БП ") == 0 })[0];
        
        if (modelOkr == null) {
            modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc)==obj.Name(g_nLoc)})[0]; //вместо модели окружения ищем одноименную модель
        }
        var dateend = modelOkr.Attribute(Constants.AT_VALID_UNTIL,g_nLoc).getValue();
        if ( dateend == "" ) { return "2100-01-01"}
        else {
                //задаем формат исходной текстовой даты
                var formatForParse = new java.text.SimpleDateFormat("dd.MM.yyyy");  
                //переводим строковую дату в формат "дата"
                var date = formatForParse.parse(dateend);            
                //задаем формат преобразования даты
                var sqlFormat = new java.text.SimpleDateFormat("yyyy-MM-dd");  
                return sqlFormat.format(date);
        }
        }        

        proto.getTargets = function () {
        var obj = this.objDef;
        
        var modelOkr = obj.AssignedModels ( ).filter(function(mod){return mod.Name(g_nLoc).indexOf("_Окружение БП ") == 0 })[0];
        if (modelOkr == null) {
         return ""}
         else {
                var targets  = modelOkr.ObjOccListBySymbol ( [Constants.ST_OBJCTV] );
                var target = "";
                for (var i=0; i< targets.length; i++) {
  target = target+targets[i].ObjDef().Name(g_nLoc).toString().trim()+" "+targets[i].ObjDef().Attribute(Constants.AT_DESC, g_nLoc).getValue().toString().trim()+". ";
                }
             return target.trim();
         }
       
        }
        proto.getInputs = function() {
                var obj = this.objDef;
                var objOCC = obj.OccList (  ).filter(function(occ){
                return (occ.Model().Name(g_nLoc).indexOf("_Окружение БП ") == 0)})[0];
         if (objOCC==null) {return ""}
                var inputsObj=objOCC.getConnectedObjOccs ( [Constants.ST_PACK, Constants.ST_PACK_PIC_2] , Constants.EDGES_IN );
    if (inputsObj.length==0)  {return ""}
    else {
       var allinputs ="";
        for (var i=0; i<inputsObj.length;i++){
         allinputs = allinputs +
         inputsObj[i].ObjDef().Name(g_nLoc).toString().trim()+" "+
         inputsObj[i].ObjDef().Attribute(Constants.AT_DESC, g_nLoc).getValue().toString().trim()+". ";
        }
        return allinputs.trim()
        }
        }
        proto.getOutputs = function() {
         var obj = this.objDef;
         var objOCC = obj.OccList (  ).filter(function(occ){
                    //[Constants.MT_VAL_ADD_CHN_DGM]
                return (occ.Model().Name(g_nLoc).indexOf("_Окружение БП ") == 0)})[0];
                     if (objOCC==null) {return ""};
                var outputsObj=objOCC.getConnectedObjOccs ( [Constants.ST_PACK, Constants.ST_PACK_PIC_2] , Constants.EDGES_OUT );
        if (outputsObj.length==0) {return ""}
        else {
        var alloutputs ="";
        for (var i=0; i<outputsObj.length;i++){
         alloutputs = alloutputs +
         outputsObj[i].ObjDef().Name(g_nLoc).toString().trim()+" "+
         outputsObj[i].ObjDef().Attribute(Constants.AT_DESC, g_nLoc).getValue().toString().trim()+". ";
        }
        return alloutputs.trim()
        }
        }
       proto.getProducts = function() {
         var obj = this.objDef;
         var objOCC = obj.OccList (  ).filter(function(occ){
            return (occ.Model().Name(g_nLoc).indexOf("_Окружение БП ") == 0)});
        if (objOCC.length==0) {return ""}
        else {
        var productsObj=objOCC.getConnectedObjOccs ( [Constants.ST_PERFORM, Constants.ST_PROD_SERV] , Constants.EDGES_OUT );
         var allproducts ="";
         for (var i=0; i<productsObj.length;i++){
         allproducts = allproducts +
         productsObj[i].ObjDef().Name(g_nLoc).toString().trim()+" "+
         productsObj[i].ObjDef().Attribute(Constants.AT_DESC, g_nLoc).getValue().toString().trim()+". ";
        }
        return allproducts.trim();
       }
       }
return bp_obj_class;
}      
      
/*       var startModel = rootGroup.ModelList ( true, [Constants.MT_VAL_ADD_CHN_DGM] ).filter(function (mymodel){
          return ((mymodel.Name(g_nLoc)==" Верхнеуровневая модель Банка")&&
                 (mymodel.Group().Name(g_nLoc)=="  Модель (дерево) бизнес-процессов Банка"))
          })[0];
          var grBusinessModel =  startModel.Group().Parent();
          //FindGUID("b57555230-bf14-11e7-1e27-0017a4772806");  //Функция  "Верхнеуровневая модель Банка"
          var startelement = startModel.ObjOccListBySymbol ( [Constants.ST_VAL_ADD_CHN_SML_2] )[0];//получили стартовый элемент модели - дерева
          
          var repo_class = new init_repo_class(Context, ArisData);
          var objtree = new repo_class(Context, ArisData, startelement);
          
          var s=0;       
 */       
        function init_repo_class(context, arisData){ // класс репозитория
        
        var repo_class = function (context, arisData, firstelement){
           this.id  = firstelement.ObjDef().Identifier().slice(firstelement.ObjDef().Identifier().indexOf("."));;
           this.element = firstelement;
           this.childs = this.getChilds (); 
           this.parents = this.getParentObj ();

        }
        var proto = repo_class.prototype;
       proto.getChilds = function (){
           
       var element = this.element;
       var cxnarray = element.CxnOccList ( );
       var childArray = [];
       for (var i=0; i< cxnarray.length; i++) {
        childArray.push(cxnarray[i].TargetObjOcc ( ));
        
       }
       return childArray;
       // getConnectedObjOccs ( int[] aSymbolTypes, int direction )
       }

       proto.getParentObj = function (){
       var element = this.element;
       
         var cxnarray = element.CxnOccList ( );
       var parrent = [];
       for (var i=0; i< cxnarray.length; i++) {
        parrent.push(cxnarray[i].SourceObjOcc ( ));
        
       }
       parrent  = arisData.Unique(parrent);
       return parrent[0];
       // getConnectedObjOccs ( int[] aSymbolTypes, int direction )
       }





       return repo_class;
        }// endOF класс репозитория 
        
    } //end of prototype.execute 

////////////////////////////////////////////////////////
var myMain  = new Main(context, arisData);
 return myMain;

////////////////////////////////////////////////////////
} //function createMainInstance(context, arisData)  {
