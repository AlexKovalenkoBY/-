var g_nLoc =Context.getSelectedLanguage(); 
var mygroup = ArisData.getSelectedGroups()[0];
main();
function main(){
    var sfile = getImportFile();
    if (sfile == null) return;
            
    var fileConext = Context.getExcelReader(sfile.getData());
    var sheet = fileConext.getSheets()[0]; //в импортируемом файле должен быть только 1 лист 
    var grName = mygroup.Name(g_nLoc);
    grName= grName.replace(" ", "");
if (grName.indexOf(sheet.getName())<0) { //если имя листа в загружаемом файле не соответствует имени группы, в которой планируется создать модель - выход  с сообщением
    Dialogs.MsgBox("Внимание!!!\n \n Выбранная группа не соответствует загрружаемому БП.  \n\n  Работа прервана!");
    return; 
}
    var currentrow=0;
    var subprocessArr = [];
          while (sheet.getCell(currentrow,0)!=null) {
            subprocessArr.push(sheet.getCell(currentrow,0).getCellValue( ));
            currentrow++;
}
    var subprManager = [];
       currentrow = 0;
        while (sheet.getCell(currentrow,1)!=null) {
                subprManager.push(sheet.getCell(currentrow,1).getCellValue( ));
                currentrow++;
       }


if (subprManager.length!=subprocessArr.length) {
    Dialogs.MsgBox("Внимание!!!\n \n В импортируемом файле разное количество строк в столбцах 1 и 2. \n\n  Работа прервана!");
    return;
}
//теперь можно строить таблицу
var newmodelName = "Менеджеры подпроцессов БП "+mygroup.Name(g_nLoc);

 var searchItem = ArisData.getActiveDatabase().createSearchItem(Constants.AT_NAME, g_nLoc, "Менеджеры подпроцессов БП *", Constants.SEARCH_CMP_EQUAL, false, true);

  //из массивов с гуидами формируем массив строк и массив столбцов для матричной модели    
var rowObjs = [];  
var colObj = [];
var rowcollspair = [];
for (var i=0;i<subprManager.length;i++){
 rowObjs.push( ArisData.getActiveDatabase().FindGUID(subprocessArr[i]));    
 colObj.push( ArisData.getActiveDatabase().FindGUID(subprManager[i]));
 rowcollspair.push([colObj[i],rowObjs[i]]);
} 

/* if (mygroup.ModelList (false, [Constants.MT_MATRIX_MOD] , searchItem).length !=0){
    Dialogs.MsgBox("Внимание!!!\n \n В группе уже имется такая модель!!! Для продолжения необходимо удалить существующую модель. \n\n  Работа прервана!");
    return;

}*/
//var newmodel =  ArisData.getActiveDatabase().FindGUID("93488cc1-4f1e-11ea-1e27-0017a4772806");
var newmodel = mygroup.CreateModel ( Constants.MT_MATRIX_MOD, newmodelName, g_nLoc );
var myMatrix = newmodel.getMatrixModel ( );

var matrixManagers = newmodel.getMatrixModel ( ).getHeader(false);
var matrixProcesses = newmodel.getMatrixModel ( ).getHeader(true);
var Row_Header_Title = matrixProcesses.setTitle("Подпроцесс",g_nLoc);
var Column_Header_Title = matrixManagers.setTitle("Менеджер подпроцесса",g_nLoc);

var newCell = null;

for (var i=0;i<rowObjs.length;i++) {
 newCell = myMatrix.createHeaderCell(newCell,rowObjs[i],Constants.ST_FUNC, 25,true);
   newCell.setVisible(true);
   newCell.setExpanded(true);
  
}

newCell = null;
var uniqueSubPrManagers = ArisData.Unique(colObj);
for ( i=0; i<uniqueSubPrManagers.length; i++ ) {
   newCell = myMatrix.createHeaderCell(newCell,uniqueSubPrManagers[i],Constants.ST_EMPL_TYPE, 250,false);
   newCell.setVisible(true);
   newCell.setExpanded(true);
  // newCell
   newCell.setSymbolNum (Constants.ST_EMPL_TYPE);
  
}
matrixManagers.setOrientation(Constants.MATRIX_HDR_ORIENTATION_STD); //установили горизонтальную ориентацию для ячеек с менеджерами подпроцессов

   myMatrix.setVisibleObjectSymbolTypes([Constants.ST_FUNC], true);   
   myMatrix.setVisibleObjectSymbolTypes([Constants.ST_EMPL_TYPE], false);//Constants.ST_ACTOR5
   var CreatedConnectionDataObject = myMatrix.createNewMatrixConnectionDataObject(Constants.ST_EMPL_TYPE, Constants.ST_FUNC, Constants.CT_IS_PRCS_RSPN, null, true, true);//создает объект с параметрами какие связи показывать
   //связи от обектов типа Position  - 683
   //до обектов типа Function  - 335
   //сыязь типа Accepts  - 435
   //может быть только от Source к Target объекту  - null
   //Показивать на матрице  - true
   //Сделать дефолтной связзю  - true
   // Таких объектов может быть нескольно
   
   myMatrix.setCxnData([CreatedConnectionDataObject]);//отправляем этот масив параметров в матрицу. Теперь матрица знает какие связи показывать

var myMatrixHeaderRows = myMatrix.getHeader ( true);
var myMatrixHeaderColumns = myMatrix.getHeader ( false);
var rowCells = myMatrixHeaderRows.getCells();
var columnCells = myMatrixHeaderColumns.getCells();

//встявляем класс 
var pair_class = new init_pair_class();
var columnObjectsCells = [];
for ( i=0; i<columnCells.length; i++ )  {
    columnObjectsCells.push( new pair_class (columnCells[i],rowCells, rowcollspair) )
}

var existedCxn = null;
for (i=0; i<columnObjectsCells.length; i++) {

    for (var j=0;j<columnObjectsCells[i].rowsObjs.length;j++) {
    
    existedCxn = columnObjectsCells[i].colObj.getDefinition().CxnList().filter(function(conn) {
      return conn.TargetObjDef ( ).GUID() == columnObjectsCells[i].rowsObjs[j].getDefinition().GUID()});
      if (existedCxn.length==0 ) {
        myMatrix.createCxn( columnObjectsCells[i].colObj,columnObjectsCells[i].rowsObjs[j],Constants.CT_IS_PRCS_RSPN);
      }
    } 
    }
var s=0;
} //main


function init_pair_class(){ //собирает все окружающие функцию элементы
    var pair_class= function(colobjDef_object,rowHeader, pairsArray)
    {
        this.colObj = colobjDef_object;//objDef  объекта функция (или тип лица) 
        this.rowsObjs = this.getRowObjs(rowHeader, pairsArray); //объекты, связанные с типом лица

    }
    var proto =   pair_class.prototype;
   
    proto.getRowObjs = function(rowHeader, pairsArray){ //дописать метод для инициализации строк для соединения
    var rowObjsArray  =[] ;
    var currentCol = this.colObj ;
    var funcObjDef = [];
    for ( var i=0; i<pairsArray.length; i++ ) {
        if (currentCol.getDefinition().GUID () === pairsArray[i][0].GUID() )   {
            funcObjDef.push(pairsArray[i][1]);
        }
    }
    for ( i =0; i<funcObjDef.length; i++) {
        for (var j=0; j<rowHeader.length; j++) {

            if (funcObjDef[i].GUID() === rowHeader[j].getDefinition().GUID() ) {
              rowObjsArray.push(rowHeader[j])  ;
            }
        
    } //for j 
    } //for i 
    return rowObjsArray;
        
    }
     return pair_class;   
}
   



/////////////////////////////////////////////////////////////////////////////////////////////

function getImportFile() {
    // Init
    var sdefname = "";
    var sdefext = "*.xls!!Excel|*.xls||";
    var sdefdir = "";
    var stitle = Context.getScriptInfo(Constants.SCRIPT_NAME);
    
    bisok = false;
    var sfiles = Dialogs.getFilePath(sdefname, sdefext, sdefdir, stitle, 0);
    
    if (sfiles != null && sfiles.length > 0) {
        return sfiles[0];
    }
    return null;
}
